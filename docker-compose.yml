version: '3.8'

services:
  db:
    build:
      context: ./database
      dockerfile: Dockerfile
    container_name: postgres_db
    environment:
      POSTGRES_DB: rails_app_development
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
    secrets:
      - db_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: rails_backend
    environment:
      RAILS_ENV: development
      POSTGRES_DB: rails_app_development
      POSTGRES_USER: postgres
    secrets:
      - db_password
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend
      - database
    expose:
      - "3000"
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:3000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: nextjs_frontend
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://backend:3000
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - public
      - backend
    expose:
      - "3000"
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:3000 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx_proxy
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - public
      - backend
    ports:
      - "80:80"
    volumes:
      - nginx_logs:/var/log/nginx
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

secrets:
  db_password:
    file: ./secrets/db_password.txt

volumes:
  postgres_data:
  nginx_logs:

networks:
  public:
    driver: bridge
  backend:
    driver: bridge
  database:
    driver: bridge
    internal: true
